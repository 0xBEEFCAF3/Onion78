@page "/coinjoin"
@using Chaincase.UI.Services
@using WalletWasabi.CoinJoin.Client.Rounds;
@using Chaincase.Common
@using Chaincase.UI.Components;

@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject Global Global
@inject CoinJoinViewModel CoinJoinViewModel

@inherits ReactiveComponentBase<CoinJoinViewModel>

<ion-content class="ion-padding">

    @if (!ViewModel.IsSynced)
    {
        <ion-text color="primary">
            <h2>Once your wallet has sync'd, you can pick coins to mix!</h2>
        </ion-text>
    }
    else
    {
        <ion-text color="primary">
            <h2>Select Some coins from this list</h2>
        </ion-text>
    }

    @if (ViewModel.IsQueuedToCoinJoin)
    {
        <p>
            🎉 Inputs have been registered
        </p>
        <p class="danger-text">
            Chaincase must be open to complete a CoinJoin.
            We'll notify you when registration ends to open.
        </p>
    }

    <ion-text color="primary">
        <h2>
            Amount Selected:
            ₿ @ViewModel.AmountQueued.ToString()
        </h2>
    </ion-text>

    @* Coin Selection*@
    <IonButton @OnClick="ToggleSelectCoinsModal" expand="block">
        Coin Selection <ion-icon name="chevron-forward-outline" />
    </IonButton>
    <SelectCoinsModal @bind-Visible="@IsSelectCoinsModalVisible"
                      SelectCoinsViewModel="@ViewModel.CoinList" />
    @* Progress Bar *@
    <ion-text color="primary">
        <h5>Percentage of peers queued in most advanced round </h5>
    </ion-text>
    <ion-progress-bar value="@ViewModel.QueuedPercentage" />
    @* List Coin Join round info**@

    <ul class="list-group">
        <li class="badge">
            ₿ Required to CoinJoin
            <span class="primary">@ViewModel.RequiredBTC</span>
        </li>
        <li class="badge">
            Phase
            <span class="success"> @ViewModel.RoundPhaseState.Phase </span>
        </li>
        <li class="badge">
            Registration Ends in
            <span class="primary">@ViewModel.TimeLeftTillRoundTimeout </span>
        </li>
        <li class="badge">
            Joining With at Least
            <span class="primary">@ViewModel.PeersNeeded peers</span>
        </li>
        <li class="badge">
            Registered Peers
            <span class="primary"> @ViewModel.PeersRegistered</span>
        </li>
        <li class="badge">
            Coordinator Fee
            <span class="primary">@ViewModel.CoordinatorFeePercent % per anonymity set </span>
        </li>
    </ul>
    <div>
        <IonPasswordInput @bind-Value="password" placeholder="Password" />
    </div>
    @if (ViewModel.IsQueuedToCoinJoin)
    {
        <ion-button @onclick='ExitCoinJoin' @onclick:preventDefault="true" expand="block">Cancel </ion-button>
    }
    else
    {
        <ion-button @onclick='CoinJoin' @onclick:preventDefault="true" expand="block">COINJOIN</ion-button>
        <ion-button @onclick='ExitCoinJoin' @onclick:preventDefault="true" expand="block">Cancel </ion-button>
    }
    @*<IonToast Visible="true" message="1234" showCloseButton="true" duration="true"></IonToast>*@
</ion-content>

@code {
    private bool IsSelectCoinsModalVisible = false;
    private string password = "";
    public CoinJoinPage()
    {
    }

    protected override void OnInitialized()
    {
        ViewModel = CoinJoinViewModel;
        UiStateService.Title = "COIN JOIN";
    }

    void ExitCoinJoin()
    {
        NavigationManager.NavigateTo("/");
    }

    void CoinJoin()
    {
        ViewModel.JoinRound(password);
    }

    private void ToggleSelectCoinsModal()
    {
        IsSelectCoinsModalVisible = !IsSelectCoinsModalVisible;
    }

}
