@page "/send/selectcoins"

@using Chaincase.Common
@inject Global Global
@inject SelectCoinsViewModel SelectCoinsViewModel
@inherits ReactiveComponentBase<SelectCoinsViewModel>


<ion-content class="ion-padding">

    @if (!ViewModel.CoinList.Any())
    {
        <p>Your coins will appear here</p>
    }
    else
    {
        <IonRadioGroup @bind-Value="CoinSelectionRadios">
            <IonItem class="ion-no-padding">
                <ion-label>Select Private</ion-label>
                <ion-radio mode="md" slot="start" value="private" @onclick="SelectPrivateCoins" />
            </IonItem>
        </IonRadioGroup>

        <IonList @onclick="CoinClickHandler">
            @foreach (var coin in ViewModel.CoinList)
            {
                <IonItem detail="true" @onclick="@(() => OpenCoinDetail(@coin))">
                    <SelectableCoin CoinViewModel="@coin" />
                </IonItem>
            }
            @*@for (int i=0; i < ViewModel.CoinList.Count(); i++)
            {
                var tmp = ViewModel.CoinList.ElementAt(i);
                <SelectableCoin OnClick="Log" CoinViewModel="@tmp" />
            }*@
        </IonList>
    }

    <IonButton @onclick="@OpenDetail">modal</IonButton>

</ion-content>

<CoinDetailModal @bind-Visible="@IsDetailModalVisible" CoinViewModel="@CurrentCoinViewModel"/>




@code {

    private string CoinSelectionRadios { get; set; }

    private bool IsDetailModalVisible { get; set; }

    private CoinViewModel CurrentCoinViewModel { get; set; }

    protected override void OnParametersSet()
    {
        ViewModel = SelectCoinsViewModel;
        CurrentCoinViewModel = ViewModel.CoinList.First();

        base.OnParametersSet();
    }

    private void OpenDetail()
    {
        CurrentCoinViewModel = ViewModel.CoinList.First();
        IsDetailModalVisible = true;
    }

    private void OpenCoinDetail(CoinViewModel coin)
    {
        CurrentCoinViewModel = coin;
        IsDetailModalVisible = true;
        StateHasChanged();
    }

    private void Log() => System.Diagnostics.Debug.WriteLine("Log");


    void CoinClickHandler()
    {
        CoinSelectionRadios = "no-sentinel";
        StateHasChanged();
    }

    private void SelectPrivateCoins()
    {
        ViewModel.SelectCoins(x => x.AnonymitySet >= Global.Config.PrivacyLevelSome);
        StateHasChanged();
    }
}
