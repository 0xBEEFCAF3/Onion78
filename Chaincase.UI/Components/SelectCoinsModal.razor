@using Chaincase.Common
@inject Global Global 
@inherits ReactiveComponentBase<SelectCoinsViewModel>

<IonModal @bind-Visible="@Visible">
    <ion-header>
        <ion-toolbar>
            <ion-title>Select Coins</ion-title>
            <ion-buttons slot="start">
                <IonButton @onclick="CloseModal">Back</IonButton>
            </ion-buttons>
        </ion-toolbar>
    </ion-header>
    <ion-content class="ion-padding">

        @if (!ViewModel.CoinList.Any())
        {
            <p>Your coins will appear here</p>
        }
        else
        {

            <IonRadioGroup @bind-Value="CoinSelectionRadios">
                <IonItem>
                    <ion-label>Select Private</ion-label>
                    <ion-radio mode="md" slot="start" value="private" @onclick="SelectPrivateCoins"/>
                </IonItem>
            </IonRadioGroup>

            <div @onclick="CoinClickHandler">
            @foreach(var coin in ViewModel.CoinList)
            {
                <SelectableCoin CoinViewModel="@coin" />
            }
            </div>
        }

    </ion-content>
</IonModal>
    
@code {

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public SelectCoinsViewModel SelectCoinsViewModel { get; set; }

    private string CoinSelectionRadios { get; set; }

    protected override void OnParametersSet()
    {
        ViewModel = SelectCoinsViewModel;
        base.OnParametersSet();
    }

    private async Task CloseModal()
    {
        bool visible = false;
        await VisibleChanged.InvokeAsync(visible);
    }

    void CoinClickHandler()
    {
        CoinSelectionRadios = "no-sentinel";
        StateHasChanged();
    }

    private void SelectPrivateCoins()
    {
        ViewModel.SelectCoins(x => x.AnonymitySet >= Global.Config.PrivacyLevelSome);
        StateHasChanged();
    }
}
