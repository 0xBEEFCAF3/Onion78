@page "/receive"
@using Chaincase.UI.Services

@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject ReceiveViewModel ReceiveViewModel
@inherits ReactiveComponentBase<ReceiveViewModel>

<ion-content class="ion-padding">
    <h1>Who are you receiving from?</h1>
    <p>This information is never shared with anyone. It will help keep your future activity private.</p>
    <ion-label>Contact Label</ion-label>
    <IonInput @bind-Value="@ViewModel.ProposedLabel" placeholder="e.g. Mt. Fox exchange" />

    <IonButton OnClick="@(() => IsModalVisible = true)" expand="block">CONTINUE</IonButton>

    <IonModal Visible="@IsModalVisible">
        <ion-header>
            <ion-toolbar>
                <ion-title>Authorize Address</ion-title>
                <ion-buttons slot="start">
                    <IonButton OnClick="CloseModal">Back</IonButton>
                </ion-buttons>
            </ion-toolbar>
        </ion-header>
        <ion-content class="ion-padding">
            <PasswordPrompt @bind-Password="Password" SubmitPassword="@SubmitPassword"></PasswordPrompt>
        </ion-content>
    </IonModal>
</ion-content>

@code {

    private string Label { get; set; }

    private string Password { get; set; }

    private bool IsModalVisible { get; set; }

    protected override void OnInitialized()
    {
        ViewModel = ReceiveViewModel;
        UiStateService.Title = "RECEIVE";
    }

    private void SubmitPassword(string password)
    {
        if (ViewModel.DidGetNextReceiveKey(password ?? ""))
        {
            // PasswordPrompt modal is this page's child so it will disappear
            CloseModal();
            NavigationManager.NavigateTo("/receive/address");
        } else
        {
            // TTODO shake instead
            CloseModal();
        }

    }

    private void CloseModal()
    {
        IsModalVisible = false;
        StateHasChanged();
    }
}
