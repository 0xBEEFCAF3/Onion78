@page "/receive/address"
@using Chaincase.UI.Services
@using Chaincase.Common.Contracts
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject ReceiveViewModel ReceiveViewModel
@inject IClipboard Clipboard
@inject IShare Share
@inherits ReactiveComponentBase<ReceiveViewModel>

<IonContent>
    <div class="ion-padding">
        <IonSegment class="ion-padding" @bind-Value="ReceiveSegment" @onclick="HandleReceiveSegmentClick">
            <IonSegmentButton value="@SIMPLE">
                <IonLabel>Simple</IonLabel>
            </IonSegmentButton>
            <IonSegmentButton value="@PAYJOIN" layout="icon-start">
                <IonIcon name="shuffle"></IonIcon>
                <IonLabel>PayJoin</IonLabel>
            </IonSegmentButton>
        </IonSegment>
    </div>
    @if (ReceiveSegment == PAYJOIN && @ViewModel.IsPayjoinLive)
    {
        <p class="ion-padding" style="width: 256px; height: 256px; margin: auto">
            <QRCode Data="@ViewModel.P2EPUri"></QRCode>
        </p>

        <div class="ion-padding">
            <IonLabel class="ion-padding">
                <p class="ion-text-center">
                    @ViewModel.P2EPUri
                </p>
            </IonLabel>
        </div>

        <div class="ion-padding" style="display:flex; justify-content: center;">
            <IonChip @onclick="@(async () => await CopyToClipboardAsync(ViewModel.P2EPUri))" color="primary">
                <ion-icon name="copy-outline"></ion-icon>
                <IonLabel>Copy</IonLabel>
            </IonChip>
            <IonChip @onclick="ShareP2EPLink" color="primary">
                <ion-icon name="share-outline"></ion-icon>
                <IonLabel>Share</IonLabel>
            </IonChip>
        </div>
        <IonList class="ion-padding">
            <IonListHeader>
                <IonLabel>
                    Receive Details
                </IonLabel>
            </IonListHeader>
            <IonItem>
                <IonLabel>Amount</IonLabel>
                <IonBadge color="secondary" slot="end">₿ @ViewModel.ProposedAmount</IonBadge>
            </IonItem>
            <IonItem>
                <IonLabel>Label</IonLabel>
                <IonBadge slot="end">@ViewModel.AppliedLabel</IonBadge>
            </IonItem>
            <IonItem>
                <IonLabel>PayJoin Duration</IonLabel>
                <IonBadge slot="end">@ViewModel.HiddenServiceTimeLeft</IonBadge>
            </IonItem>
        </IonList>
    }
    else
    {
        <p class="ion-padding" style="width: 256px; height: 256px; margin: auto">
            <QRCode Data="@ViewModel.BitcoinUri"></QRCode>
        </p>
        <div class="ion-padding">
            <IonLabel>Recieve Address</IonLabel>
        </div>
        <IonNote>Click To Copy!</IonNote>
        <IonText @onclick="@(async () => await CopyToClipboardAsync(ViewModel.Address))">
            <p>@ViewModel.Address</p>
        </IonText>
        <IonButton OnClick="ShareLink" expand="block">SHARE LINK</IonButton>

    }
    <ClipboardToast @bind-Visible="@IsToastVisible" />
</IonContent>
<IonFooter class="ion-padding">
    <IonButton href="/overview" expand="block">DONE</IonButton>
</IonFooter>

<IonModal @bind-Visible="IsPasswordModalVisible">
    <IonHeader>
        <IonToolbar>
            <IonTitle>Approve PayJoin</IonTitle>
            <IonButtons slot="start">
                <IonButton @onclick="@DontTryPayJoin">Back</IonButton>
            </IonButtons>
        </IonToolbar>
    </IonHeader>
    <IonContent class="ion-padding">
        <IonLabel position="stacked">Enter Password</IonLabel>
        <div class="@(IsShaking ? "shake" : "")">
            <IonItem>
                <IonPasswordInput @bind-Value="Password" placeholder="e.g. margaretthatcheris110%SEXY" />
            </IonItem>
        </div>
        <IonCard color="primary">
            <IonCardContent>
                <strong>Info:</strong> PayJoin requires your approval to collaborate on the transaction.
            </IonCardContent>
        </IonCard>
        <IonButton @onclick="TryPayJoin" color="primary" expand="block">Get PayJoin Invoice</IonButton>
        <IonLoading Visible="@ViewModel.IsBusy"></IonLoading>
    </IonContent>
</IonModal>

@code {

    private const string SIMPLE = "simple";
    private const string PAYJOIN = "pj";

    private string ReceiveSegment = SIMPLE;
    private bool IsShaking;
    private bool IsPasswordModalVisible;
    private bool IsPayJoinApproved;
    private bool IsToastVisible;

    private string Password = "";

    protected override void OnInitialized()
    {
        ViewModel = ReceiveViewModel;
        UiStateService.Title = "RECEIVE";
    }

    private void HandleReceiveSegmentClick()
    {
        if (ReceiveSegment == PAYJOIN && !ViewModel.IsPayjoinLive)
        {
            ToggleModal();
        }
    }

    private async Task TryPayJoin()
    {
        try
        {
            IsShaking = false;
            await ViewModel.TryStartPayjoin(Password);
            ToggleModal();
        }
        catch (Exception ex)
        {
            IsShaking = true;
        }
    }

    private void DontTryPayJoin()
    {
        IsPasswordModalVisible = false;
        ReceiveSegment = SIMPLE;
    }

    private async Task ShareLink()
    {
        await Share.ShareText(ViewModel.BitcoinUri);
    }

    private async Task ShareP2EPLink()
    {
        await Share.ShareText(ViewModel.P2EPUri);
    }

    private async Task CopyToClipboardAsync(string toCopy)
    {
        await Clipboard.Copy(toCopy);
        IsToastVisible = true;
    }

    private void ToggleModal() => IsPasswordModalVisible = !IsPasswordModalVisible;

}
