@page "/receive/address"
@using Chaincase.UI.Services
@using Chaincase.Common.Contracts
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject ReceiveViewModel ReceiveViewModel
@inject IClipboard Clipboard 
@inject IShare Share
@inherits ReactiveComponentBase<ReceiveViewModel>

<IonContent>
    <IonSegment class="ion-padding" @bind-Value="@ViewModel.ReceiveType">
        <IonSegmentButton value="@ViewModel.PayJoinValue">
            <IonLabel>PayJoin</IonLabel>
        </IonSegmentButton>
        <IonSegmentButton value="@ViewModel.DefaultRecieveAddress">
            <IonLabel>Legacy Transaction</IonLabel>
        </IonSegmentButton>
    </IonSegment>

    @if (ViewModel.ReceiveType == ViewModel.PayJoinValue)
    {
        <p class="ion-padding" style="width: 256px; height: 256px; margin: auto">
            <QRCode Data="@ViewModel.P2EPUri"></QRCode>
        </p>

        <div class="ion-padding">
        <IonLabel class="ion-padding">
            <p class="ion-text-center">
                @ViewModel.P2EPUri
            </p>
        </IonLabel>
        </div>

        <div class="ion-padding" style="display:flex; justify-content: center;">
            <IonChip @onclick="@(async () => await CopyToClipboardAsync(ViewModel.P2EPUri))" color="primary">
                <ion-icon name="copy-outline"></ion-icon>
                <IonLabel>Copy</IonLabel>
            </IonChip>
            <IonChip @onclick="ShareP2EPLink" color="primary">
                <ion-icon name="share-outline"></ion-icon>
                <IonLabel>Share</IonLabel>
            </IonChip>
        </div>
        <IonList class="ion-padding">
            <IonListHeader>
                <IonLabel>
                    Receive Details
                </IonLabel>
            </IonListHeader>
            <IonItem>
                <IonLabel>Amount</IonLabel>
                <IonBadge color="secondary" slot="end">₿ @ViewModel.ProposedAmount</IonBadge>
            </IonItem>
            <IonItem>
                <IonLabel>Label</IonLabel>
                <IonBadge slot="end">@ViewModel.AppliedLabel</IonBadge>
            </IonItem>
        </IonList>
    }
    else
    {
        <p style="width: 256px; height: 256px; margin: auto">
            <QRCode Data="@ViewModel.BitcoinUri"></QRCode>
        </p>
        <IonLabel>Recieve Address</IonLabel> <br />
        <IonNote>Click To Copy!</IonNote>
        <IonText @onclick="@(async () => await CopyToClipboardAsync(ViewModel.Address))">
            <p>@ViewModel.Address</p>
        </IonText>
        <IonButton OnClick="ShareLink" expand="block">SHARE LINK</IonButton>

    }
    <ClipboardToast @bind-Visible="@IsToastVisible" />
</IonContent>
<IonFooter class="ion-padding">
    <IonButton href="/overview" expand="block">DONE</IonButton>
</IonFooter>

@code {
    private bool IsToastVisible;

    protected override void OnInitialized()
    {
        ViewModel = ReceiveViewModel;
        UiStateService.Title = "RECEIVE";
    }

    private string IsPayJoiningValue() {
        return ViewModel.IsPayJoining ? ViewModel.PayJoinValue : ViewModel.DefaultRecieveAddress;
    }

    private async Task ShareLink() {
        await Share.ShareText(ViewModel.BitcoinUri);
    }

    private async Task ShareP2EPLink() {
        await Share.ShareText(ViewModel.P2EPUri);
    }

    private async Task CopyToClipboardAsync(string toCopy)
    {
        await Clipboard.Copy(toCopy);
        IsToastVisible = true;
    }


}
