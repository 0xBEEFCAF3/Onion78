@page "/coinjoin"
@using NBitcoin
@using Chaincase.UI.Services
@using WalletWasabi.CoinJoin.Client.Rounds;
@using Chaincase.Common
@using Chaincase.UI.Components;

@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService 
@inject Global Global
@inject CoinJoinViewModel CoinJoinViewModel
@inject IJSRuntime JS

@inherits ReactiveComponentBase<CoinJoinViewModel>

<ion-content>

    @if (!ViewModel.IsSynced)
    {
        <ion-text>
            Once your wallet has sync'd, you can pick coins to mix!
        </ion-text>
    }
    else
    {
        <div class="ion-padding">
            @if (IsQueuedToCoinJoin)
            {
                <p>
                    🎉 Inputs have been registered
                </p>
                <ion-text color="warning">
                    Chaincase must be open to complete a CoinJoin.
                    We'll notify you when registration ends to open.
                </ion-text>
            }

            <ion-text>
                Amount Selected:
                ₿ @ViewModel.CoinList.SelectedAmount
            </ion-text>

            @* Coin Selection*@
            <IonButton @onclick="NavigateToSelectCoins" expand="block">
                SELECT COINS <ion-icon name="chevron-forward-outline" />
            </IonButton>

            @* Progress Bar *@
            <ion-label>
                Percentage of peers queued in most advanced round
            </ion-label>
            <ion-progress-bar value="@ViewModel.QueuedPercentage" />
            @* List Coin Join round info**@
        </div>
        <ion-list>
            <ion-item>
                <ion-label>₿ Required to Join</ion-label>
                <ion-badge slot="end">@ViewModel.RequiredBTC</ion-badge>
            </ion-item>
            <ion-item>
                <ion-label>Phase</ion-label>
                <ion-badge slot="end">@ViewModel.RoundPhaseState.Phase</ion-badge>
            </ion-item>
            <ion-item>
                <ion-label>Phase ends</ion-label>
                <ion-badge slot="end">@ViewModel.TimeLeftTillRoundTimeout</ion-badge>
            </ion-item>
            <ion-item>
                <ion-label>Auto-join at</ion-label>
                <ion-badge slot="end">@ViewModel.PeersNeeded</ion-badge>
            </ion-item>
            <ion-item>
                <ion-label>Registered peers</ion-label>
                <ion-badge slot="end">@ViewModel.PeersRegistered</ion-badge>
            </ion-item>
            <ion-item>
                <ion-label>Coinjoin Fee</ion-label>
                <ion-badge slot="end">@(ViewModel.CoordinatorFeePercent)% per peer</ion-badge>
            </ion-item>
        </ion-list>
        <div class="ion-padding">
            <IonModal @bind-Visible="IsPasswordModalVisible">
                <ion-header>
                    <ion-toolbar>
                        <ion-title>Queue to Join</ion-title>
                        <ion-buttons slot="start">
                            <IonButton @onclick="@ToggleModal">Back</IonButton>
                        </ion-buttons>
                    </ion-toolbar>
                </ion-header>
                <ion-content>
                    <ion-text class="ion-padding">
                        <h1 class="ion-padding">Authorize Selected Coins to Join</h1>
                    </ion-text>
                    <IonItem>
                        <ion-label floating>Password</ion-label>
                        <IonPasswordInput @bind-Value="Password" />
                    </IonItem>
                    <IonButton OnClick="@CoinJoin" class="ion-padding">JOIN NOW</IonButton>
                </ion-content>

            </IonModal>
            @if (IsQueuedToCoinJoin)
            {
                <IonButton OnClick='@ExitCoinJoin' expand="block">EXIT COINJOIN</IonButton>
            }
            else
            {
                <IonButton OnClick='@ToggleModal' expand="block">COINJOIN</IonButton>
            }
            <IonButton OnClick="@ShowToast" class="ion-padding">SHOW TOES[T]</IonButton>

        </div>
    }
    <IonToast @bind-Visible="@IsToastVisible" duration="2000" message="i toast you so"/>
</ion-content>

@code {
    private ElementReference loader;
    private bool IsPasswordModalVisible;
    private bool IsToastVisible;
    private string ToastMessage = "";
    private const int ToastDuration = 2000; // ms

    private string Password = "";

    protected override void OnInitialized()
    {
        ViewModel = CoinJoinViewModel;
        UiStateService.Title = "COINJOIN";
    }

    private void NavigateToSelectCoins()
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/coinjoin");
        });
        NavigationManager.NavigateTo("/selectcoins");
    }

    private async Task ExitCoinJoin()
    {
        await ViewModel.ExitCoinJoinAsync();
    }

    private async Task CoinJoin()
    {
        try
        {
            await ViewModel.DoEnqueueAsync(Password);
            IsToastVisible = true;
            ToastMessage = "Success! Joined Coin Join Round.";
            ToggleModal();
        }
        catch (Exception err)
        {
            ToastMessage = err.Message;
            IsToastVisible = true;
        }
    }

    private async Task ShowToast()
    {
        IsToastVisible = true;
    }

    private void ToggleModal() => IsPasswordModalVisible = !IsPasswordModalVisible;

    private bool IsQueuedToCoinJoin => ViewModel.AmountQueued.CompareTo(Money.Zero) != 0;

}
