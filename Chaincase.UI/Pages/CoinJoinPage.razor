@page "/coinjoin"
@using Chaincase.UI.Services
@using WalletWasabi.CoinJoin.Client.Rounds;
@using Chaincase.Common
@using Chaincase.UI.Components;

@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService 
@inject Global Global
@inject CoinJoinViewModel CoinJoinViewModel

@inherits ReactiveComponentBase<CoinJoinViewModel>

<ion-content>

    @if (!ViewModel.IsSynced)
    {
        <ion-text>
            Once your wallet has sync'd, you can pick coins to mix!
        </ion-text>
    }
    else
    {
<div class="ion-padding">
    @if (ViewModel.IsQueuedToCoinJoin)
    {
        <p>
            🎉 Inputs have been registered
        </p>
        <ion-text color="warning">
            Chaincase must be open to complete a CoinJoin.
            We'll notify you when registration ends to open.
        </ion-text>
    }

    <ion-text>
            Amount Selected:
            ₿ @ViewModel.AmountQueued.ToString()
    </ion-text>

    @* Coin Selection*@
    <IonButton @onclick="NavigateToSelectCoins" expand="block">
        SELECT COINS <ion-icon name="chevron-forward-outline" />
    </IonButton>

    @* Progress Bar *@
    <ion-label>
        Percentage of peers queued in most advanced round
    </ion-label>
    <ion-progress-bar value="@ViewModel.QueuedPercentage" />
    @* List Coin Join round info**@
</div>
        <ion-list>
            <ion-item>
                <ion-label>₿ Required to Join</ion-label>
                <ion-badge slot="end">@ViewModel.RequiredBTC</ion-badge>
            </ion-item>
            <ion-item>
                <ion-label>Phase</ion-label>
                <ion-badge slot="end">@ViewModel.RoundPhaseState.Phase</ion-badge>
            </ion-item>
            <ion-item>
                <ion-label>Phase ends</ion-label>
                <ion-badge slot="end">@ViewModel.TimeLeftTillRoundTimeout</ion-badge>
            </ion-item>
            <ion-item>
                <ion-label>Auto-join at</ion-label>
                <ion-badge slot="end">@ViewModel.PeersNeeded</ion-badge>
            </ion-item>
            <ion-item>
                <ion-label>Registered peers</ion-label>
                <ion-badge slot="end">@ViewModel.PeersRegistered</ion-badge>
            </ion-item>
            <ion-item>
                <ion-label>Coinjoin Fee</ion-label>
                <ion-badge slot="end">@(ViewModel.CoordinatorFeePercent)% per peer</ion-badge>
            </ion-item>
        </ion-list>
        <div class="ion-padding">
            <div>
                <IonPasswordInput @bind-Value="password" placeholder="Password" />
            </div>
            @if (ViewModel.IsQueuedToCoinJoin)
            {
                <ion-button @onclick='ExitCoinJoin' @onclick:preventDefault="true" expand="block">Cancel </ion-button>
            }
            else
            {
                <ion-button @onclick='CoinJoin' @onclick:preventDefault="true" expand="block">COINJOIN</ion-button>
                <ion-button @onclick='ExitCoinJoin' @onclick:preventDefault="true" expand="block">Cancel </ion-button>
            }
            <IonToast @bind-Visible="IsToastVisible" @bind-message="ToastMessage" showCloseButton="true" duration="2000"></IonToast>
        </div>
        }
</ion-content>

@code {
    private bool IsToastVisible = false;
    private string ToastMessage = "";
    private const int ToastDuration = 2000; // ms


    private string password = "";
    public CoinJoinPage()
    {
    }

    protected override void OnInitialized()
    {
        ViewModel = CoinJoinViewModel;
        UiStateService.Title = "COINJOIN";
    }

    private void NavigateToSelectCoins()
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/coinjoin");
        });
        NavigationManager.NavigateTo("/selectcoins");
    }

    void ExitCoinJoin()
    {
        NavigationManager.NavigateTo("/");
    }

    void CoinJoin()
    {
        try
        {
            ViewModel.JoinRound(password);
            IsToastVisible = true;
            ToastMessage = "Success! Joined Coin Join Round.";
        }
        catch (Exception err) {
            ToastMessage = err.Message;
            IsToastVisible = true;

        }
    }
}
