@page "/overview"
@using Chaincase.UI.Services
@using Chaincase.Common
@inject IndexViewModel IndexViewModel
@inject UIStateService UiStateService
@inject StackService StackService 
@inject NavigationManager NavigationManager
@inject Global Global

@inherits ReactiveComponentBase<IndexViewModel>

<ion-content>
    <div class="ion-padding">
        <ion-text>
            <h1>Balance: @ViewModel.Balance</h1>
        </ion-text>
    </div>

    <Status />

    <IonList>
    @foreach (var transaction in ViewModel.Transactions)
    {
        <ion-item-sliding>
            <TransactionListItem TransactionViewModel="@transaction" />
            <ion-item-options side="end">
                <IonItemOption OnClick="@(() => OpenTransactionDetail(transaction))" color="secondary">Details</IonItemOption>
            </ion-item-options>
        </ion-item-sliding>
    }
    </IonList>

    <TransactionDetailModal @bind-Visible="IsDetailModalVisible" TransactionViewModel="@CurrentTransactionViewModel"/>

    @if (!ViewModel.Transactions.Any())
    {
        <p>Your transactions will appear here</p>
    }

    <div class="ion-padding">
        <IonButton expand="block"
                   OnClick='() => StackPush("/backup/start")'>
            DON'T FORGET TO MAKE A BACKUP
        </IonButton>
        <IonButton expand="block"
                   OnClick='() => StackPush("/receive")'>
            GET RECEIVE ADDRESS
        </IonButton>

        <IonButton expand="block"
                   disabled="@(!ViewModel.IsWalletInitialized)"
                   OnClick='() => StackPush("/send/who")'>
            SEND
        </IonButton>

        <IonButton expand="block"
                   disabled="@(!ViewModel.IsWalletInitialized)"
                   OnClick='() => StackPush("/coinjoin")'>
            COINJOIN
        </IonButton>
    </div>
</ion-content>

@code{
    private bool IsDetailModalVisible { get; set; }
    private TransactionViewModel CurrentTransactionViewModel { get; set; }

    protected override void OnInitialized()
    {
        ViewModel = IndexViewModel;

        if (!Global.HasWalletFile())
            NavigationManager.NavigateTo("landing");

        UiStateService.Title = "Chaincase";
        base.OnInitialized();
    }

    private void StackPush(string uri)
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/overview");
        });
        NavigationManager.NavigateTo(uri);
    }

    private void OpenTransactionDetail(TransactionViewModel transaction)
    {
        CurrentTransactionViewModel = transaction;
        IsDetailModalVisible = true;
    }
}
