@page "/coinjoin"
@using Chaincase.UI.Services
@using WalletWasabi.CoinJoin.Client.Rounds;
@using Chaincase.Common
@using Chaincase.UI.Components;

@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService 
@inject Global Global
@inject CoinJoinViewModel CoinJoinViewModel

@inherits ReactiveComponentBase<CoinJoinViewModel>

<ion-content class="ion-padding">

    @if (!ViewModel.IsSynced)
    {
        <ion-text color="primary">
            <h2>Once your wallet has sync'd, you can pick coins to mix!</h2>
        </ion-text>
    }
    else
    {
        @if (ViewModel.IsQueuedToCoinJoin)
        {
            <p>
                🎉 Inputs have been registered
            </p>
            <p class="danger-text">
                Chaincase must be open to complete a CoinJoin.
                We'll notify you when registration ends to open.
            </p>
        }

        <ion-text color="primary">
            <h2>
                Amount Selected:
                ₿ @ViewModel.AmountQueued.ToString()
            </h2>
        </ion-text>

        @* Coin Selection*@
        <IonButton  @onclick="NavigateToSelectCoins"  expand="block">
            SELECT COINS <ion-icon name="chevron-forward-outline" />
        </IonButton>

        @* Progress Bar *@
        <ion-text color="primary">
            <h5>Percentage of peers queued in most advanced round </h5>
        </ion-text>
        <ion-progress-bar value="@ViewModel.QueuedPercentage" />
        @* List Coin Join round info**@

        <ul class="list-group">
            <li class="badge">
                ₿ Required to CoinJoin
                <span class="primary">@ViewModel.RequiredBTC</span>
            </li>
            <li class="badge">
                Phase
                <span class="success"> @ViewModel.RoundPhaseState.Phase </span>
            </li>
            <li class="badge">
                Registration Ends in
                <span class="primary">@ViewModel.TimeLeftTillRoundTimeout </span>
            </li>
            <li class="badge">
                Joining With at Least
                <span class="primary">@ViewModel.PeersNeeded peers</span>
            </li>
            <li class="badge">
                Registered Peers
                <span class="primary"> @ViewModel.PeersRegistered</span>
            </li>
            <li class="badge">
                Coordinator Fee
                <span class="primary">@ViewModel.CoordinatorFeePercent % per anonymity set </span>
            </li>
        </ul>
        <div>
            <IonPasswordInput @bind-Value="password" placeholder="Password" />
        </div>
        @if (ViewModel.IsQueuedToCoinJoin)
        {
            <ion-button @onclick='ExitCoinJoin' @onclick:preventDefault="true" expand="block">Cancel </ion-button>
        }
        else
        {
            <ion-button @onclick='CoinJoin' @onclick:preventDefault="true" expand="block">COINJOIN</ion-button>
            <ion-button @onclick='ExitCoinJoin' @onclick:preventDefault="true" expand="block">Cancel </ion-button>
        }
        <IonToast @bind-Visible="IsToastVisible" @bind-message="ToastMessage" showCloseButton="true" duration="2000"></IonToast>
        }
</ion-content>

@code {
    private bool IsToastVisible = false;
    private string ToastMessage = "";
    private const int ToastDuration = 2000; // ms


    private string password = "";
    public CoinJoinPage()
    {
    }

    protected override void OnInitialized()
    {
        ViewModel = CoinJoinViewModel;
        UiStateService.Title = "COIN JOIN";
    }

    private void NavigateToSelectCoins()
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "coinjoin");
        });
        NavigationManager.NavigateTo("selectcoins");
    }

    void ExitCoinJoin()
    {
        NavigationManager.NavigateTo("/");
    }

    void CoinJoin()
    {
        try
        {
            ViewModel.JoinRound(password);
            IsToastVisible = true;
            ToastMessage = "Success! Joined Coin Join Round.";
        }
        catch (Exception err) {
            ToastMessage = err.Message;
            IsToastVisible = true;

        }
    }
}
