@page "/receive/address"
@using Chaincase.UI.Services
@using Chaincase.Common.Contracts
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject ReceiveViewModel ReceiveViewModel
@inject IClipboard Clipboard 
@inject IShare Share
@inherits ReactiveComponentBase<ReceiveViewModel>

<IonContent class="ion-padding">
    <IonSegment style="margin:10px 5px 10px 5px;" color="success" @bind-Value="@ViewModel.ReceiveType">
        <IonSegmentButton value="@ViewModel.PayJoinValue">
            <IonLabel>PayJoin</IonLabel>
        </IonSegmentButton>
        <IonSegmentButton value="@ViewModel.DefaultRecieveAddress">
            <IonLabel>Regular Transaction</IonLabel>
        </IonSegmentButton>
    </IonSegment>

    @if (ViewModel.ReceiveType == ViewModel.PayJoinValue)
    {
        <IonLabel>PayJoin Recieve Address</IonLabel> <br />
        <IonTextArea style="padding:5px; border:1px solid" disabled>
            @ViewModel.P2EPUri
        </IonTextArea>
        <div style="display:flex; justify-content:space-around;">
            <IonButton @onclick="@(async () => await CopyToClipboardAsync(ViewModel.P2EPUri))">Copy</IonButton>
            <IonButton OnClick="ShareP2EPLink" expand="block">Share</IonButton>
        </div>
        <IonList>
            <IonListHeader>
                <IonLabel>
                    Receive Details
                </IonLabel>
            </IonListHeader>
            <IonItem>
                <IonLabel>Amount</IonLabel>
                <IonBadge color="secondary" slot="end">₿ @ViewModel.ProposedAmount</IonBadge>
            </IonItem>
            <IonItem>
                <IonLabel>Lable</IonLabel>
                <IonBadge slot="end">@ViewModel.AppliedLabel</IonBadge>
            </IonItem>
        </IonList>
    }
    else
    {
        <p style="width: 256px; height: 256px; margin: auto">
            <QRCode Data="@ViewModel.BitcoinUri"></QRCode>
        </p>
        <IonLabel>Recieve Address</IonLabel> <br />
        <IonNote>Click To Copy!</IonNote>
        <IonText @onclick="@(async () => await CopyToClipboardAsync(ViewModel.Address))">
            <p>@ViewModel.Address</p>
        </IonText>
        <IonButton OnClick="ShareLink" expand="block">SHARE LINK</IonButton>

    }
    <IonButton href="/overview" expand="block">DONE</IonButton>
    <ClipboardToast @bind-Visible="@IsToastVisible" />
</IonContent>

@code {
    private bool IsToastVisible;

    protected override void OnInitialized()
    {
        ViewModel = ReceiveViewModel;
        UiStateService.Title = "RECEIVE";
    }

    private string IsPayJoiningValue() {
        return ViewModel.IsPayJoining ? ViewModel.PayJoinValue : ViewModel.DefaultRecieveAddress;
    }

    private async Task ShareLink() {
        await Share.ShareText(ViewModel.BitcoinUri);
    }

    private async Task ShareP2EPLink() {
        await Share.ShareText(ViewModel.P2EPUri);
    }

    private async Task CopyToClipboardAsync(string toCopy)
    {
        await Clipboard.Copy(toCopy);
        IsToastVisible = true;
    }


}
