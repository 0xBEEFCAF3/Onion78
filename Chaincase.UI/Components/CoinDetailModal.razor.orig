@using Chaincase.Common.Contracts
@inject IClipboard Clipboard 
@inherits ReactiveComponentBase<CoinViewModel>

<IonModal @bind-Visible="Visible">
    <IonHeader>
        <IonToolbar>
            <IonTitle>Coin Details</IonTitle>
            <IonButtons slot="start">
                <IonButton @onclick="CloseModal">Back</IonButton>
            </IonButtons>
        </IonToolbar>
    </IonHeader>

    <IonContent>

<<<<<<< HEAD
        @if (ViewModel is not null)
        {
            <ion-list>
                <IonItem>
                    <ion-label>@ViewModel.AmountBtc BTC</ion-label>
                </IonItem>
                <IonItem OnClick="@(async () => await CopyToClipboardAsync(ViewModel.TransactionId))">
                    <ion-label>Transaction ID: @ViewModel.TransactionId</ion-label>
                </IonItem>
                <IonItem>
                    <ion-label>Output Index: @ViewModel.OutputIndex</ion-label>
                </IonItem>
                <IonItem>
                    <ion-label>Confirmations: @ViewModel.Confirmations</ion-label>
                </IonItem>
                <IonItem>
                    <ion-label>Anonymity Set: @ViewModel.AnonymitySet</ion-label>
                </IonItem>
                <IonItem>
                    <ion-label>Contacts: @ViewModel.Clusters</ion-label>
                </IonItem>
            </ion-list>
        }
||||||| e20c0b685
   @if (ViewModel is not null)
    {
        <ion-list>
            <IonItem>
                <ion-label>@ViewModel.AmountBtc BTC</ion-label>
            </IonItem>
            <IonItem>
                <ion-label>Transaction ID: @ViewModel.TransactionId</ion-label>
            </IonItem>
            <IonItem>
                <ion-label>Output Index: @ViewModel.OutputIndex</ion-label>
            </IonItem>
            <IonItem>
                <ion-label>Confirmations: @ViewModel.Confirmations</ion-label>
            </IonItem>
            <IonItem>
                <ion-label>Anonymity Set: @ViewModel.AnonymitySet</ion-label>
            </IonItem>
            <IonItem>
                <ion-label>Contacts: @ViewModel.Clusters</ion-label>
            </IonItem>
        </ion-list>
    }
=======
   @if (ViewModel is not null)
    {
        <IonList>
            <IonItem>
                <IonLabel>@ViewModel.AmountBtc BTC</IonLabel>
            </IonItem>
            <IonItem>
                <IonLabel>Transaction ID: @ViewModel.TransactionId</IonLabel>
            </IonItem>
            <IonItem>
                <IonLabel>Output Index: @ViewModel.OutputIndex</IonLabel>
            </IonItem>
            <IonItem>
                <IonLabel>Confirmations: @ViewModel.Confirmations</IonLabel>
            </IonItem>
            <IonItem>
                <IonLabel>Anonymity Set: @ViewModel.AnonymitySet</IonLabel>
            </IonItem>
            <IonItem>
                <IonLabel>Contacts: @ViewModel.Clusters</IonLabel>
            </IonItem>
        </IonList>
    }
>>>>>>> bump-blazorv12

<<<<<<< HEAD
        <ClipboardToast @bind-Visible="@IsToastVisible" />
    </ion-content>
||||||| e20c0b685
    </ion-content>
=======
    </IonContent>
>>>>>>> bump-blazorv12
</IonModal>


@code {
    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public CoinViewModel CoinViewModel {
        get { return ViewModel; }
        set { ViewModel = value; }
    }

    [Parameter]
    public EventCallback<CoinViewModel> CoinViewModelChanged { get; set; }

    private bool IsToastVisible;

    private async Task CloseModal()
    {
        bool visible = false;
        await VisibleChanged.InvokeAsync(visible);
    }

    private async Task CopyToClipboardAsync(string toCopy)
    {
        await Clipboard.Copy(toCopy);
        IsToastVisible = true;
    }
}
