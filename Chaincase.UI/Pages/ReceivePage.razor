@page "/receive"
@using Chaincase.UI.Services

@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject ReceiveViewModel ReceiveViewModel
@inherits ReactiveComponentBase<ReceiveViewModel>

<ion-content class="ion-padding">
    <p>Who are you receiving from?</p>
    <p>This information is never shared with anyone. It will help keep your future activity private.</p>
    <ion-label>Contact Label</ion-label>
    <IonInput @bind-Value="@ViewModel.ProposedLabel" placeholder="e.g. Mt. Fox exchange" />

    <ion-label>Password</ion-label>
    <IonInput @bind-Value="@Password" />

    <IonButton OnClick="ClickSubmitPassword" expand="block">Continue</IonButton>

    @*<IonButton OnClick="ToggleModal" expand="block">CONTINUE</IonButton>

    <IonModal @bind-Visible="@IsModalVisible">
        <ion-header>
            <ion-toolbar>
                <ion-title>Authorize</ion-title>
                <ion-buttons slot="start">
                    <IonButton OnClick="ToggleModal">Back</IonButton>
                </ion-buttons>
            </ion-toolbar>
        </ion-header>
        <ion-content class="ion-padding">



        </ion-content>
    </IonModal>*@
</ion-content>

@code {

    private string Label { get; set; }

    private string Password { get; set; }

    private bool IsModalVisible { get; set; }

    protected override void OnInitialized()
    {
        ViewModel = ReceiveViewModel;
        UiStateService.Title = "RECEIVE";
    }

    private void ClickSubmitPassword(MouseEventArgs _)
    {
        SubmitPassword(Password);
    }

    private void SubmitPassword(string password)
    {
        if (ViewModel.DidGetNextReceiveKey(password ?? ""))
        {
            // PasswordPrompt modal is this page's child so it will disappear
            NavigationManager.NavigateTo("receive/address");
        }
    }

    private void ToggleModal()
    {
        IsModalVisible = !IsModalVisible;
    }
}
