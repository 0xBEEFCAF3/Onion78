
@inherits ReactiveComponentBase<CoinViewModel>

<IonModal @bind-Visible="Visible">
    <IonHeader>
        <IonToolbar>
            <IonTitle>Coin Details</IonTitle>
            <IonButtons slot="start">
                <IonButton @onclick="CloseModal">Back</IonButton>
            </IonButtons>
        </IonToolbar>
    </IonHeader>

    <IonContent>

   @if (ViewModel is not null)
    {
        <IonList>
            <IonItem>
                <IonList>@ViewModel.AmountBtc BTC</IonList>
            </IonItem>
            <IonItem>
                <IonList>Transaction ID: @ViewModel.TransactionId</IonList>
            </IonItem>
            <IonItem>
                <IonList>Output Index: @ViewModel.OutputIndex</IonList>
            </IonItem>
            <IonItem>
                <IonList>Confirmations: @ViewModel.Confirmations</IonList>
            </IonItem>
            <IonItem>
                <IonList>Anonymity Set: @ViewModel.AnonymitySet</IonList>
            </IonItem>
            <IonItem>
                <IonList>Contacts: @ViewModel.Clusters</IonList>
            </IonItem>
        </IonList>
    }

    </IonContent>
</IonModal>


@code {
    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public CoinViewModel CoinViewModel {
        get { return ViewModel; }
        set { ViewModel = value; }
    }

    [Parameter]
    public EventCallback<CoinViewModel> CoinViewModelChanged { get; set; }

    private async Task CloseModal()
    {
        bool visible = false;
        await VisibleChanged.InvokeAsync(visible);
    }

}
